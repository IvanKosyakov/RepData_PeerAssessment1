library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
plot (p)
factor (Month)
factor (airquality$Month)
?xyplot\
?xyplot
trellis
?trellis
??trellis
??print.trellis
??splom
??par
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, col=Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets =  factor(Month))
qplot(Wind, Ozone, data = airquality, facets =  factor(Month)~.)
?qplot
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = c("plot", "smooth")
)
qplot(Wind, Ozone, data = airquality, geom = c("point", "smooth"))
qplot(Wind, Ozone, data = airquality, geom = "density")
qplot(Wind, Ozone, data = airquality, geom = "density")
qplot(Wind, Ozone, data = airquality, geom = c("density", "density")
)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = c("density", "density"))
qplot(Wind, Ozone, data = airquality, geom = "density")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
movies
str (movies)
qplot(Wind, Ozone, data = airquality, geom = "density")
qplot(Wind, Ozone, data = airquality, geom = c("point", "smooth"))
test <- qplot(Wind, Ozone, data = airquality, geom = c("point", "smooth"))
print (test)
qplot(Wind, Ozone, data = airquality, facets =  factor(Month))
qplot(Wind, Ozone, data = airquality)
test <- qplot(Wind, Ozone, data = airquality, geom = c("point", "smooth"))
print (test)
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(votes, rating)) + geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
?refolmulate
??refolmulate
?rep
?glmFit
??glmFit
?glm
library (downloader)
library (ggplot2)
library (data.table)
library (plyr)
# Download source file and unzip it. Read CSV-file.
URL<- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download(URL, dest="repdata_data_activity.zip", mode="wb")
unzip ("repdata_data_activity.zip")
data <- read.csv ("activity.csv")
data$date = as.Date (data$date)
data <- data.table(data)
# 1. What is mean total number of steps taken per day?
## 1.1. Calculate the total number of steps taken per day
StepsPerDay <- data [, list (DaySteps = sum (steps, na.rm = TRUE)),
keyby="date"]
## 1.2. Make a histogram of the total number of steps taken each day
ggplot (StepsPerDay, aes (x = DaySteps)) +
geom_histogram () +
#  scale_fill_gradient ("Frequency", low = "green", high = "red") +
labs (x = "Total number of steps taken per day",
y = "Frequency")
## 1.3. Calculate and report the mean and median
##  of the total number of steps taken per day
mean (StepsPerDay$DaySteps, na.rm = TRUE)
median (StepsPerDay$DaySteps, na.rm = TRUE)
# 2. What is the average daily activity pattern?
DailyActivity <- data [, list (Average = mean (steps, na.rm = TRUE)),
keyby="interval"]
## 2.1. Make a time series plot (i.e. type = "l") of the 5-minute
##  interval (x-axis) and the average number of steps taken,
##  averaged across all days (y-axis)
ggplot (DailyActivity, aes (x = interval, y = Average)) +
geom_line () +
labs (x = "Interval", y = "Average number of steps taken (across all days)")
## 2.2. Which 5-minute interval, on average across all the days
##  in the dataset, contains the maximum number of steps?
print ("5-minute interval, on average across all the days in the dataset,")
print (" which contains the maximum number of steps:")
DailyActivity [Average == max (DailyActivity$Average), ]
# 3. Imputing missing values
## 3.1. Calculate and report the total number of missing values
##  in the dataset (i.e. the total number of rows with NAs)
sum (apply (data, 1, anyNA))
## 3.2. Devise a strategy for filling in all of the missing values
##  in the dataset.
dataNA <- data [apply (data, 1, anyNA), ]
dataAvailable <- data [!apply (data, 1, anyNA), ]
dataNA <- arrange (join (dataNA, DailyActivity), interval)
dataNA [, steps := Average]
dataNA [, Average := NULL]
## 3.3. Create a new dataset that is equal to the original dataset
##  but with the missing data filled in.
dataFilled <- rbind (dataNA, dataAvailable)
## 3.4. Make a histogram of the total number of steps taken each day
##  and Calculate and report the mean and median total number of steps
##  taken per day.
StepsPerDayFilled <- dataFilled [, list (DaySteps = sum (steps, na.rm = TRUE)),
keyby="date"]
ggplot (StepsPerDayFilled, aes (x = date, y = DaySteps)) +
geom_histogram (aes (fill = DaySteps), stat="identity") +
scale_fill_gradient ("Steps per day", low = "green", high = "red") +
labs (x = "Date", y = "Total number of steps taken per day")
ggplot (StepsPerDay, aes (x = DaySteps)) +
geom_histogram () +
labs (x = "Total number of steps taken per day",
y = "Frequency")
ggplot (StepsPerDayFilled, aes (x = date, y = DaySteps)) +
geom_histogram (aes (fill = DaySteps), stat="identity") +
scale_fill_gradient ("Steps per day", low = "green", high = "red") +
labs (x = "Date", y = "Total number of steps taken per day")
ggplot (StepsPerDayFilled, aes (x = DaySteps)) +
geom_histogram () +
labs (x = "Total number of steps taken per day",
y = "Frequency")
setwd("~/GitHub/RepData_PeerAssessment1")
?geom_histogram
